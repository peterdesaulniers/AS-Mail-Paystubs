(*
Version 1.0: 2011-02-08

This script automates part of the process of emailing employee's paystubs. It is used by dragging and dropping a group of files on its app icon and then processes each file as follows:

1. Determines the path to the paystub
2. Cross references the file name of the paystub to the email address in the email list
3. Creates a new email message to the corresponding email address and attaches the paystub

For this to work the following requirements must be met:

1. Each employee must be listed in the email list below
2. Each paystub must be saved as its own pdf file
3. The naming of the paystub must match the name in the email list, which is last name first name initial file extension, e.g. for file name for the employ named Peter Desaulniers would be 'DesaulniersP.pdf'

**Still to do:
1. Add option to include extra attachment
2. Add option to include extra text to email message
*)on open (_Files)		## Email List ##	set _EmailList to {}	set _EmailList to _EmailList & {{"AguadoD", "david.aguado@baysidemc.com"}}	set _EmailList to _EmailList & {{"AguadoP", "poloaguado@hotmail.com"}}	set _EmailList to _EmailList & {{"AlexanderR", "donerightpg@shaw.ca"}}	set _EmailList to _EmailList & {{"BarclayJ", "jessebarclay@gmail.com"}}	set _EmailList to _EmailList & {{"Bodley-ScottP", "philbs@hotmail.com"}}	set _EmailList to _EmailList & {{"BoothJ", "sab-sam@shaw.ca"}}	set _EmailList to _EmailList & {{"BrettS", "rshbrett@yahoo.ca"}}	set _EmailList to _EmailList & {{"CanhamB", "uguise@shaw.ca"}}	set _EmailList to _EmailList & {{"CourvilleR", "rdcourville@shaw.ca"}}	set _EmailList to _EmailList & {{"DesaulniersB", "mulutka@gmail.com"}}	set _EmailList to _EmailList & {{"DesaulniersP", "pdd@mac.com"}}	set _EmailList to _EmailList & {{"EckfordR", "proplum57@live.ca"}}	set _EmailList to _EmailList & {{"EilertsenD", "deilertsen@hotmail.com"}}	set _EmailList to _EmailList & {{"FlegelG", "gary.flegel@baysidemc.com"}}	set _EmailList to _EmailList & {{"HeslopJ", "jeffreyheslop9@gmail.com"}}	set _EmailList to _EmailList & {{"GarriockS", "scott_garriock@hotmail.com"}}	set _EmailList to _EmailList & {{"GrahamG", "celiason@telus.net"}}	set _EmailList to _EmailList & {{"GreenfieldR", "ryan.greenfield@baysidemc.com"}}	set _EmailList to _EmailList & {{"JohnsonR", "kona112@hotmail.com"}}	set _EmailList to _EmailList & {{"JonesT", "tristan_erin@hotmail.com"}}	set _EmailList to _EmailList & {{"McClellandG", "gmcc@shaw.ca"}}	set _EmailList to _EmailList & {{"MeadowsD", "derekmeadows@shaw.ca"}}	set _EmailList to _EmailList & {{"MorgadoD", "danmorjr_998@hotmail.com"}}	set _EmailList to _EmailList & {{"OsborneW", "osbornew@shaw.ca"}}	set _EmailList to _EmailList & {{"PalinS", "palin@shaw.ca"}}	set _EmailList to _EmailList & {{"QuaifeD", "brendan.q@shaw.ca"}}	set _EmailList to _EmailList & {{"RikkersT", "trikkers@hotmail.com"}}	set _EmailList to _EmailList & {{"RiversM", "jackeboy@shaw.ca"}}	set _EmailList to _EmailList & {{"RobinsonT", "coastman420@hotmail.com"}}	set _EmailList to _EmailList & {{"ScottM", "mscott21@shaw.ca"}}	set _EmailList to _EmailList & {{"StalkerC", "chrisstalker@shaw.ca"}}	set _EmailList to _EmailList & {{"ThorneloeM", "blindvision@hotmail.com"}}	set _EmailList to _EmailList & {{"TobiasenE", "erik.tobiasen@baysidemc.com"}}	set _EmailList to _EmailList & {{"WaringR", "rwaring09@hotmail.ca"}}	set _EmailList to _EmailList & {{"WongE", "edwin.wong@baysidemc.com"}}	set _EmailList to _EmailList & {{"WynansR", "jrwynans@shaw.ca"}}		--Error Check	repeat with _i from 1 to (count _Files)		set _AddressCheck to getEmailAddress(getFileName(_i, _Files), _EmailList)		try			_AddressCheck		on error			display alert "No email address was not found for the file '" & getFileName(_i, _Files) & ".pdf'. Either the file name is misspelled or no email address exists for this name. Correct the spelling or update the email list and try again." as warning			return		end try	end repeat		--Ask for paystub date	set _Date to the text returned of (display dialog "Confirm the work period ending::" default answer formatDate(getDateOffset(current date, Friday, -1), "-"))		--Ask to view mesage or send without viewing	set _Send to button returned of (display dialog "Would you like to view the messages before sending them?" buttons {"View", "Send"} default button "Send")		repeat with _i from 1 to (count _Files)				set _Subject to "Bayside pay stub for the week ending " & _Date		set _Body to "Please refer to the attached PDF for your pay stub for the work period ending " & _Date & "."		set _Address to getEmailAddress(getFileName(_i, _Files), _EmailList)		set _Attachment to getAttachment(_i, _Files)				--Create the email and attach paystub		tell application "Sparrow"			activate			set _Message to make new outgoing message with properties {subject:_Subject, content:_Body}			tell _Message				make new to recipient at end of to recipients with properties {address:_Address}				make new mail attachment with properties {filename:_Attachment as alias}				if _Send is equal to "Send" then sendmessage			end tell			if _Send is equal to "View" then compose _Message		end tell			end repeat	end open## Handlers ##--Get the path to the file to be attached to the emailon getAttachment(_i, _List)	set _Path to item _i of _List	return _Pathend getAttachment--Get the file name without the extension to be used to compare to the distrobution liston getFileName(_i, _List)	tell application "Finder" to set _Name to name of item _i of _List	considering case		if "." is in _Name then			set _d to text item delimiters			set text item delimiters to "."			set _Name to _Name's text 1 thru text item -2			set text item delimiters to _d		end if	end considering	return _Nameend getFileName--Get the email address that corresponds to the file nameon getEmailAddress(_Name, _List)	repeat with _i from 1 to (count _List)		if item 1 of item _i of _List = _Name then			set _Email to item 2 of item _i of _List as string			return _Email			exit repeat		end if	end repeatend getEmailAddress--Format dateon formatDate(_Date, _Divider)	tell application "Finder"		set {year:y, month:m, day:d} to _Date		set ymd to (y * 10000 + m * 100 + d) as string		set theDate to (text items 1 thru 4 of ymd as string) & _Divider & (text items 5 thru 6 of ymd as string) & _Divider & (text items 7 thru 8 of ymd as string)	end tellend formatDate--Get offset dateon getDateOffset(_Date, _Weekday, _Offset)	-- Keep an note of whether the instance value *starts* as zero	set _InstanceIsZero to (_Offset is 0)	-- Increment negative instances to compensate for the following subtraction loop	if _Offset < 0 and _Date's weekday is not _Weekday then set _Offset to _Offset + 1	-- Subtract a day at a time until the required weekday is reached	repeat until _Date's weekday is _Weekday		set _Date to _Date - days		-- Increment an original zero instance to 1 if subtracting from Sunday into Saturday 		if _InstanceIsZero and _Date's weekday is Saturday then set _Offset to 1	end repeat	-- Add (adjusted instance) * weeks to the date just obtained and zero the time	_Date + _Offset * weeks - (_Date's time)end getDateOffset